#!/bin/sh

TARGET=${TARGET:-"debug"}

error_out() {
    echo "Error: " $1;
    return 1;
}

find_as() {
    echo -n "Looking for assembler..."
    if command -v clang &> /dev/null; then
	AS=clang
    elif command -v x86_64-elf-as &> /dev/null; then
	AS=x86_64-elf-as
    elif command -v as &> /dev/null; then
	AS=as
    else
	echo "Not found"
	error_out "No assmbler found."
    fi

    echo $AS
}

ask_confirm() {
    while 1; do
	read -p "$1" yn
	case $yn in
	    [Yy]* ) return;;
	    [Nn]* ) error_out $2; break;;
	    * ) echo "Please answer yes or no.";;
	esac
    done
}


find_cc() {
    echo -n "Looking for C compiler..."
    if command -v clang &> /dev/null; then
	CC=clang
    elif command -v x86_64-elf-gcc &> /dev/null; then
	IS_GCC=true
	CC=x86_64-elf-gcc
    elif command -v gcc &> /dev/null; then
	IS_GCC=true
	CC=gcc
    else
	echo "Not found"
	error_out "No C compiler found"
    fi

    echo $CC

    if [ "$IS_GCC" = true ]; then
	ask_confirm "GCC is not primarily supported. Still continue? [yn]" \
		    "No avaliable C compiler found"
    fi
}

find_as
find_cc

CFLAGS="-ffreestanding -Wall -Wextra -std=gnu99 -I../../src -static -nostdlib -nostdinc -fno-pie -mcmodel=kernel -mno-implicit-float -mno-red-zone -Wno-unused-function -Wno-sign-compare -D_KERNEL -Wno-typedef-redefinition"

LDFLAGS="-ffreestanding -nostdlib -z max-page-size=0x1000 -fno-pie -static -mcmodel=kernel -Wl,--Map=kernel.map"

if [ -z "$IS_GCC" ]; then
    CFLAGS="$CFLAGS -target x86_64-pc-none-elf"
fi

if [ $TARGET = "debug" ]; then
    CFLAGS="$CFLAGS -g -fno-omit-frame-pointer"
else
    CFLAGS="$CFLAGS -O2"
fi

if [ $AS = "clang" ]; then
    ASFLAGS="-target x86_64-pc-none-elf -c"
else
    ASFLAGS=""
fi

echo "Configuration: "
echo "	TARGET	$TARGET"
echo "	AS	$AS"
echo "	CC	$CC"
echo "	ASFLAGS	$ASFLAGS"
echo "	CFLAGS	$CFLAGS"
echo "	LDFLAGS	$LDFLAGS"

mkdir -p build/kern

gen_kernel_makefile() {
    pushd build/kern
    cat <<EOF > Makefile
AS=$AS
CC=$CC
LD=$CC
ASFLAGS=$ASFLAGS
CFLAGS=$CFLAGS
LDFLAGS=$LDFLAGS

EOF

    cd ../../src/kern
    OBJS=$(printf "%s.o " *.c *.s)
    cd ../../build/kern

    echo "Generating kernel Makefile..."

    cat <<EOF >> Makefile
kernel.bin: $OBJS ../../src/kern/linker.ld
	@echo "	LD	kernel.bin"
	@\$(LD) \$(LDFLAGS) -Wl,-T../../src/kern/linker.ld -okernel.bin $OBJS
	@../../scripts/mmc.pl < kernel.map > srcmap.bin

clean: FORCE
	-rm *.bin *.o kernel.map
FOCE:
EOF

    for i in $(ls ../../src/kern/*.c); do
	echo "Generating $i"
	$CC -MM -MQ$(basename $i).o $CFLAGS $i >> Makefile
	echo "	@echo \"	CC	$(basename $i).o\"" >> Makefile
	echo "	@\$(CC) \$(CFLAGS) -c -o$(basename $i).o $i" >> Makefile
	echo >> Makefile
    done

    for i in $(ls ../../src/kern/*.s); do
	echo "Generating $i"
	echo "$(basename $i).o: $i" >> Makefile
	echo "	@echo \"	AS	$(basename $i).o\"" >> Makefile
	echo "	@\$(AS) \$(ASFLAGS) -o $(basename $i).o $i" >> Makefile
    done

    popd
}

gen_kernel_makefile
